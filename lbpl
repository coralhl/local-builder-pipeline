#!/usr/bin/env bash

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

waiting_interval=10 # In seconds
timeout=300         # In seconds

default_hooks_file="$script_dir""/lbpl-hooks"

print_usage() {
    echo ""
    echo "NAME"
    echo "    lbpl -- keeps a git repository in sync with its origin,"
    echo "            sync submodules if you need, build & push docker image"
    echo "SYNOPSIS"
    echo "    lbpl -d <directory> [-h <hooks-file>] [-s] [-b]"
    echo "DESCRIPTION"
    echo "    The following options are available:"
    echo "    -d    The path to the git repository"
    echo "    -h    Custom hooks file"
    echo "    -s    Check submodules"
    echo "    -b    Build & push the image even if there are no changes in repo"
    echo ""
    exit 1
}

function check_arg(){
    if [[ $2 == -* ]]; then 
        echo "Option $1 requires an argument" >&2
        exit 1
    fi
}
 
function parse_param()
{
    if [ -z "$1" ];then
        echo "Empty list of options" >&2
        print_usage
        exit 1
    fi
    while getopts ":d:hsb" opt; do
        case $opt in
        d)
            check_arg "-d" "$OPTARG"
            git_repository_dir=${OPTARG}
            ;;
        h)
            check_arg "-h" "$OPTARG"
            hooks_file=${OPTARG}
            ;;
        s)
            check_submodules=true
            ;;
        b)
            build_anyway=true
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument (getopts)" >&2
            exit 1
            ;;
        esac
    done
}

parse_param "$@"

# Validating given git directory
if [[ -z "$git_repository_dir" ]]; then
    echo -e "\nERROR: Git directory (-d) not given!" >&2
    print_usage
fi

if [[ ! -d "$git_repository_dir/.git" ]] || [[ ! -r "$git_repository_dir/.git" ]]; then
    echo "ERROR: Git directory (-d) not found: '$git_repository_dir/.git'!" >&2
    print_usage
fi

if [[ ! -w "$git_repository_dir/.git" ]]; then
    echo "ERROR: Missing write permissions for the git directory (-d): '$git_repository_dir/.git'!" >&2
    print_usage
fi

# Convert to absolute file path if necessary
if [[ "$git_repository_dir" != /* ]]; then
    git_repository_dir="$PWD/$git_repository_dir"
fi

# Validating given hook file
[[ -z "${hooks_file}" ]] && hooks_file="$default_hooks_file"

if [[ -f "${hooks_file}" ]] && [[ -r "${hooks_file}" ]]; then
    # shellcheck source=git-repo-watcher-hooks
    source "${hooks_file}"
else
    echo "ERROR: Hooks (-h) file not found: '$hooks_file'" >&2
    print_usage
fi

# Executes user hooks
#
# $1    - Hook name
# $2-$4 - Hook arguments
hook() {
    hook_name="$1"
    shift
    if [[ "$(type -t "$hook_name")" == "function" ]]; then
        eval "$hook_name $*"
    fi
}

# Pulls commit from remote git repository
#
# $1 - Git repository name
# $2 - Branch name
pull_change() {
    git pull
    exit_code=$?

    commit_message=$(git log -1 --pretty=format:"%h | %an | %ad | %s")

    if [[ $exit_code -eq 1 ]]; then
        hook "pull_failed" "$1" "$2" "$commit_message"
    else
        hook "change_pulled" "$1" "$2" "$(printf '%q\n' "$commit_message")"
    fi
}

cd "$git_repository_dir" || exit 1

main_script() {
    git fetch

    repo_name=$(basename -s .git "$(git config --get remote.origin.url)")

    previous_branch="$branch"
    branch=$(git branch | sed -n -e 's/^\* \(.*\)/\1/p')

    if [[ -z $branch ]]; then
        echo "ERROR: Unable to get branch" >&2
        exit 1
    fi

    if [[ -n $previous_branch ]] && [[ "$previous_branch" != "$branch" ]]; then
        hook "branch_changed" "$repo_name" "$branch" "$previous_branch"
    fi

    upstream="$(git rev-parse --abbrev-ref --symbolic-full-name "@{u}" 2>/dev/null)"

    # upstream was not configured
    if [[ -z "$upstream" ]]; then
        hook "upstream_not_set" "$repo_name" "$branch"
    fi

    git_local=$(git rev-parse @)
    git_remote=$(git rev-parse "$upstream")
    git_base=$(git merge-base @ "$upstream")

    if [[ -z $started ]]; then
        started=true
        hook "startup" "$repo_name" "$branch"
    fi

    rep_pull=0
    sm_pull=0

    if [[ "$git_local" == "$git_remote" ]]; then
        hook "no_changes" "$repo_name" "$branch"
    elif [[ "$git_local" == "$git_base" ]]; then
        hook "pull_change" "$repo_name" "$branch"
        rep_pull=1
    elif [[ "$git_remote" == "$git_base" ]]; then
        hook "local_change" "$repo_name" "$branch"
    else
        hook "diverged" "$repo_name" "$branch"
    fi

    if [[ $check_submodules ]]; then
        sm_list=$(grep path .gitmodules | sed 's/.*= //') # Get Submodules names
        for sm_name in "${sm_list[@]}"
        do
            arrSHA1+=($(git submodule status $sm_name | awk '{print $1;}')) # Get Submodules hashes
        done

        git submodule update --remote --recursive

        for sm_name in "${sm_list[@]}"
        do
            arrSHA2+=($(git submodule status $sm_name | awk '{print $1;}'))
        done

        for i in "${!arrSHA1[@]}"
        do
            if [ ${arrSHA1[$i]} != ${arrSHA2[$i]} ]; then
                ((sm_pull++))
            fi
        done

        if [ $sm_pull -eq 0 ]; then
            echo "Submodules have not changed"
            #hook "no_changes" "$repo_name" "$branch"
        else
            echo "Submodules changed"
            #hook "diverged" "$repo_name" "$branch"
        fi
    fi
    
    if [ $rep_pull -ne 0 ] || [ $sm_pull -ne 0 ] || [[ $build_anyway ]]; then
        hook "build_di" "$repo_name" "$branch" "$git_repository_dir"
    fi
}

seconds=0
((timeout=$timeout-$waiting_interval))
until [ ! -f ".git/index.lock" ]
do
    if (( $seconds > $timeout )); then
        echo "Giving up..."
        exit 1
    fi
    echo "ERROR: Git repository is locked, waiting to unlock..."
    ((seconds=seconds+$waiting_interval))
    sleep $waiting_interval
done

main_script
